{"version":3,"sources":["scripts/Cell.js","scripts/Grid.js","scripts/Tile.js","scripts/slideTiles.js","scripts/main.js"],"names":["Cell","cellElement","x","y","tile","_tile","_mergeTile","value","scoreDef","remove","val","Grid","gridElement","gridSize","cellSize","cellGap","fontSize","style","setProperty","allCells","i","cell","document","createElement","classList","add","push","append","cells","map","index","Math","floor","randomIndex","random","emptyCells","length","reduce","cellGrid","filter","Tile","tileContainer","tileElement","_value","textContent","color","log2","_x","_y","slideTiles","group","lastValidCell","j","moveToCell","canAccept","mergeTile","canMove","some","module","exports","grid","gameBoard","querySelector","selectElement","scoreCurrentContainer","scoreBestContainer","modal","lose","win","buttons","querySelectorAll","score","bestScore","loadGame","firstChild","removeChild","randomEmptyCell","opacity","display","keyDown","addEventListener","handleTouchMove","activeElement","blur","focus","getCol","cellsByColumn","getColReverse","column","reverse","getRow","cellsByRow","getRowReverse","row","handleKeyDown","e","removeEventListener","key","setTimeout","mergeAndAddRandom","checkLose","openModal","forEach","scoreCurrent","mergeTiles","boolean","box","button","target","handleTouchStart","xDown","yDown","getTouches","evt","touches","firstTouch","clientX","clientY","xUp","yUp","xDiff","yDiff","abs"],"mappings":"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","file":"main.8a480a34.js","sourceRoot":"..\\src","sourcesContent":["export default class Cell {\n  constructor(cellElement, x, y) {\n    this.cellElement = cellElement;\n    this.x = x;\n    this.y = y;\n  }\n\n  get tile() {\n    return this._tile;\n  }\n\n  set tile(val) {\n    this._tile = val;\n\n    if (!val) {\n      return;\n    }\n    this._tile.x = this.x;\n    this._tile.y = this.y;\n  }\n\n  get mergeTile() {\n    return this._mergeTile;\n  }\n\n  set mergeTile(value) {\n    this._mergeTile = value;\n\n    if (!value) {\n      return;\n    }\n    this._mergeTile.x = this.x;\n    this._mergeTile.y = this.y;\n  }\n\n  canAccept(tile) {\n    return (\n      !this._tile || (!this._mergeTile && this._tile.value === tile.value)\n    );\n  }\n\n  mergeTiles() {\n    if (!this._tile || !this._mergeTile) {\n      return 0;\n    }\n    this._tile.value = this._tile.value + this._mergeTile.value;\n\n    const scoreDef = this._tile.value;\n\n    this._mergeTile.remove();\n    this._mergeTile = null;\n\n    return scoreDef;\n  }\n}\n","import Cell from './Cell.js';\n\nexport default class Grid {\n  constructor(gridElement, gridSize, cellSize, cellGap, fontSize) {\n    gridElement.style.setProperty('--grid-size', gridSize);\n    gridElement.style.setProperty('--cell-size', `${cellSize}vmin`);\n    gridElement.style.setProperty('--cell-gap', `${cellGap}vmin`);\n    gridElement.style.setProperty('--font-size', `${fontSize}vmin`);\n    // gridElement.style.setProperty('--animation', 'show');\n\n    const allCells = [];\n\n    for (let i = 0; i < gridSize * gridSize; i++) {\n      const cell = document.createElement('div');\n\n      cell.classList.add('cell');\n      allCells.push(cell);\n      gridElement.append(cell);\n    }\n\n    this.cells = allCells.map((cellElement, index) => {\n      return new Cell(\n        cellElement,\n        index % gridSize,\n        Math.floor(index / gridSize)\n      );\n    });\n  }\n\n  get cellsByRow() {\n    return this.cells.reduce((cellGrid, cell) => {\n      cellGrid[cell.y] = cellGrid[cell.y] || [];\n      cellGrid[cell.y][cell.x] = cell;\n\n      return cellGrid;\n    }, []);\n  }\n\n  get cellsByColumn() {\n    return this.cells.reduce((cellGrid, cell) => {\n      cellGrid[cell.x] = cellGrid[cell.x] || [];\n      cellGrid[cell.x][cell.y] = cell;\n\n      return cellGrid;\n    }, []);\n  }\n\n  get emptyCells() {\n    return this.cells.filter(cell => !cell.tile);\n  }\n\n  randomEmptyCell() {\n    const randomIndex = Math.floor(Math.random() * this.emptyCells.length);\n\n    return this.emptyCells[randomIndex];\n  }\n}\n","export default class Tile {\n  constructor(tileContainer, value = Math.random() > 0.2 ? 2 : 4) {\n    this.tileElement = document.createElement('div');\n    this.tileElement.classList.add('tile');\n    tileContainer.append(this.tileElement);\n    this.value = value;\n  }\n\n  get value() {\n    return this._value;\n  }\n\n  set value(val) {\n    this._value = val;\n    this.tileElement.textContent = val;\n\n    const color = 100 - Math.log2(val) * 9;\n\n    this.tileElement.style.setProperty(\n      '--bg-color',\n      `${color}%`\n    );\n\n    this.tileElement.style.setProperty(\n      '--text-color',\n      `${color <= 70 ? 90 : 10}%`\n    );\n  }\n\n  set x(value) {\n    this._x = value;\n    this.tileElement.style.setProperty('--x', value);\n  }\n\n  set y(value) {\n    this._y = value;\n    this.tileElement.style.setProperty('--y', value);\n  }\n\n  remove() {\n    this.tileElement.remove();\n  }\n\n  // waitForTransition() {\n  //   return new Promise(resolve => {\n  //     this.tileElement.addEventListener('transitionend', resolve, {\n  //       once: true,\n  //     });\n  //   });\n  // }\n};\n","// function slideTiles(cells) {\n//   return Promise.all(\n//     cells.flatMap(group => {\n//       const promises = [];\n\n//       for (let i = 1; i < group.length; i++) {\n//         const cell = group[i];\n\n//         if (!cell.tile) {\n//           continue;\n//         }\n\n//         let lastValidCell;\n\n//         for (let j = i - 1; j >= 0; j--) {\n//           const moveToCell = group[j];\n\n//           if (!moveToCell.canAccept(cell.tile)) {\n//             break;\n//           }\n//           lastValidCell = moveToCell;\n//         }\n\n//         if (lastValidCell) {\n//           promises.push(cell.tile.waitForTransition());\n\n//           if (lastValidCell._tile) {\n//             lastValidCell.mergeTile = cell.tile;\n//           } else {\n//             lastValidCell.tile = cell.tile;\n//           }\n//           cell.tile = null;\n//         }\n//       }\n\n//       return promises;\n//     })\n//   );\n// }\n\n// -----------for setTimeout ----- //\nfunction slideTiles(cells) {\n  cells.map(group => {\n    for (let i = 1; i < group.length; i++) {\n      const cell = group[i];\n\n      if (!cell.tile) {\n        continue;\n      }\n\n      let lastValidCell;\n\n      for (let j = i - 1; j >= 0; j--) {\n        const moveToCell = group[j];\n\n        if (!moveToCell.canAccept(cell.tile)) {\n          break;\n        }\n        lastValidCell = moveToCell;\n      }\n\n      if (lastValidCell) {\n        if (lastValidCell._tile) {\n          lastValidCell.mergeTile = cell.tile;\n        } else {\n          lastValidCell.tile = cell.tile;\n        }\n        cell.tile = null;\n      }\n    }\n  });\n}\n\nfunction canMove(cells) {\n  return cells.some(group => {\n    return group.some((cell, index) => {\n      if (index === 0) {\n        return false;\n      }\n\n      if (!cell.tile) {\n        return false;\n      }\n\n      const moveToCell = group[index - 1];\n\n      return moveToCell.canAccept(cell.tile);\n    });\n  });\n}\n\nmodule.exports = {\n  slideTiles,\n  canMove,\n};\n","import Grid from './Grid.js';\nimport Tile from './Tile.js';\nimport { canMove, slideTiles } from './slideTiles.js';\n\nconst gameBoard = document.querySelector('#game-board');\nconst selectElement = document.querySelector('.select-size');\nconst scoreCurrentContainer = document.querySelector('.score--current');\nconst scoreBestContainer = document.querySelector('.score--best');\n\nconst modal = document.querySelector('.modal-container');\nconst lose = document.querySelector('.modal-lose');\nconst win = document.querySelector('.modal-win');\n\n// restart button & modal button\nconst buttons = document.querySelectorAll('.button');\n\n// starting values for game board\n\nlet score = 0;\nlet bestScore = 0;\n\nlet grid;\nlet gridSize = 4;\nlet cellSize = 20;\nlet cellGap = 1.5;\nlet fontSize = 7;\n\n// innitial game board on page\nfunction loadGame() {\n  while (gameBoard.firstChild) {\n    gameBoard.removeChild(gameBoard.firstChild);\n  }\n  grid = new Grid(gameBoard, gridSize, cellSize, cellGap, fontSize);\n  grid.randomEmptyCell().tile = new Tile(gameBoard);\n  grid.randomEmptyCell().tile = new Tile(gameBoard);\n  gameBoard.style.opacity = 1;\n  score = 0;\n  scoreCurrentContainer.textContent = 0;\n  modal.style.display = 'none';\n  keyDown();// keyboard event\n  document.addEventListener('touchmove', handleTouchMove, false); // touch event\n  document.activeElement.blur();\n  gameBoard.focus();\n};\n\nloadGame();\n\n// adding events on reloading buttons\nbuttons.forEach(button => button.addEventListener('click', loadGame));\n\n// user can select another field for the game\nselectElement.addEventListener('change', (e) => {\n  gridSize = +e.target.value;\n  cellSize = gridSize === 4 ? 20 : 20 - gridSize;\n  cellGap = gridSize < 6 ? 1.5 : 0.75;\n  fontSize = gridSize < 6 ? 7 : 5;\n  loadGame();\n});\n\nfunction getCol() {\n  return grid.cellsByColumn;\n}\n\nfunction getColReverse() {\n  return grid.cellsByColumn.map(column => [...column].reverse());\n}\n\nfunction getRow() {\n  return grid.cellsByRow;\n};\n\nfunction getRowReverse() {\n  return grid.cellsByRow.map(row => [...row].reverse());\n};\n\n// function for keyboard events\nfunction handleKeyDown(e) {\n  document.removeEventListener('keydown', handleKeyDown);\n\n  switch (e.key) {\n    case 'ArrowUp':\n    case 'w':\n      if (!canMove(getCol())) {\n        keyDown();\n\n        return;\n      }\n      slideTiles(getCol());\n      break;\n    case 'ArrowDown':\n    case 's':\n      if (!canMove(getColReverse())) {\n        keyDown();\n\n        return;\n      }\n      slideTiles(getColReverse());\n      break;\n    case 'ArrowLeft':\n    case 'a':\n      if (!canMove(getRow())) {\n        keyDown();\n\n        return;\n      }\n      slideTiles(getRow());\n      break;\n    case 'ArrowRight':\n    case 'd':\n      if (!canMove(getRowReverse())) {\n        keyDown();\n\n        return;\n      }\n      slideTiles(getRowReverse());\n      break;\n    default:\n      return;\n  }\n\n  setTimeout(() => {\n    mergeAndAddRandom();\n\n    if (checkLose()) {\n      openModal();\n    }\n\n    keyDown();\n  }, 100);\n}\n\n// function to add key down event\nfunction keyDown() {\n  return document.addEventListener('keydown', handleKeyDown);\n}\n\n// function to merge tile and add random tiles to the gameboard\nfunction mergeAndAddRandom() {\n  grid.cells.forEach(cell => {\n    const scoreCurrent = cell.mergeTiles();\n\n    if (scoreCurrent === 2048) {\n      openModal(scoreCurrent);\n    }\n\n    score += scoreCurrent;\n    scoreCurrentContainer.textContent = score;\n    bestScore = bestScore <= score ? score : bestScore;\n    scoreBestContainer.textContent = bestScore;\n  });\n\n  grid.randomEmptyCell().tile = new Tile(gameBoard);\n}\n\n// check for lose\nfunction checkLose() {\n  return !canMove(getRow())\n    && !canMove(getRowReverse())\n    && !canMove(getCol())\n    && !canMove(getColReverse());\n}\n\n// opening modal with win or lose text\nfunction openModal(boolean) {\n  const box = boolean ? win : lose;\n\n  modal.style.display = 'flex';\n  box.style.display = 'block';\n  gameBoard.style.opacity = 0.2;\n  document.removeEventListener('keydown', handleKeyDown);\n  document.removeEventListener('touchmove', handleTouchMove, false);\n}\n\n// functions to handle touch events\ndocument.addEventListener('touchstart', handleTouchStart, false);\n\nlet xDown = null;\nlet yDown = null;\n\nfunction getTouches(evt) {\n  return evt.touches;\n}\n\nfunction handleTouchStart(evt) {\n  const firstTouch = getTouches(evt)[0];\n\n  xDown = firstTouch.clientX;\n  yDown = firstTouch.clientY;\n};\n\nfunction handleTouchMove(evt) {\n  if (!xDown || !yDown) {\n    return;\n  }\n\n  const xUp = evt.touches[0].clientX;\n  const yUp = evt.touches[0].clientY;\n\n  const xDiff = xDown - xUp;\n  const yDiff = yDown - yUp;\n\n  if (Math.abs(xDiff) > Math.abs(yDiff)) {\n    if (xDiff > 0) {\n      if (!canMove(getRow())) {\n        return;\n      }\n      slideTiles(getRow());\n    } else {\n      if (!canMove(getRowReverse())) {\n        return;\n      }\n      slideTiles(getRowReverse());\n    }\n  } else {\n    if (yDiff > 0) {\n      if (!canMove(getCol())) {\n        return;\n      }\n      slideTiles(getCol());\n    } else {\n      if (!canMove(getColReverse())) {\n        return;\n      }\n      slideTiles(getColReverse());\n    }\n  }\n\n  setTimeout(() => {\n    mergeAndAddRandom();\n\n    if (checkLose()) {\n      openModal();\n    }\n  }, 100);\n\n  xDown = null;\n  yDown = null;\n};\n"]}